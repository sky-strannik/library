# Списки - упорядоченные изменяемые коллекции объектов произвольных типов
some_list = ['hello', 123, True]  # чаще используют список с одним типом данных friends = ['Max', 'Leo', 'Kate']

# Можно объявить пустой список 
empty_list = []

# Можно объявить список и сразу заполнить его элементами 
friends = ['Max', 'Leo', 'Kate']

# Тип списка - list 
print(type(friends))

# Как и в строке для списка доступны индексы (начинаются с 0) 
print('Второй дpyr: ', friends[1])
print('Первый дpyr c конца', friends[-1])

# Так жe можно применить срезы 
print(friends[1:2])
print(friends[:2])
print(friends[1:])

# Функция len и методы списка
print(len(friends))  # кол-во элементов в списке

friends.append('Ron')  # добавить новый элемент
print(friends)

friends.pop()  # удаляем последний элемент и возвращаем его
print(friends)

friends.remove('Kate')  # удалить объект из списка
print(friends)

del friends[0]  # удалить элемент по индексу
print(friends)

friends.clear()  # очистка списка
print(friends)

# Есть и другие методы: сортировка и копирование

# Оператор in
# Позволяет проверить наличие элемента в списке:
# 'Max' in friends
# Результат True или False
# Работает и со строками: 'S' in 'Superman'
# Примеры:
hero = 'Superman'
goals = ['стать гуру', 'здоровье', 'накормить кота']
if 'man' in hero:
    print('Есть man')
if 'здоровье' in goals:
    print('Отличная цель - здоровье!')

# Кортеж (tuple)
# Список который нельзя изменять
# Записывается в круглых скобках
# roles = ('user', 'manager', 'admin')
# Служит для защиты от изменений


# ПРИМЕР.
# Пользователь вводит кол-во участников соревнований по python
# Пользователь вводит участников и их места в зависимости от кол-ва 
# 1. Вывод имен участников по алфавиту
# 2. Получить 3-х победителей и поздравить их
# 3. Победители: ... Поздравляем!

print('СОРЕВНОВАНИЯ ПО PYTHON')
count = int(input('Введите количество участников: '))
i = count
members = []
while i > 0:
    name = input('Кто занял {} место? '.format(i))
    members.append(name)
    i -= 1  # Вычитаем 1

# Кто участвовал в соревновании (По алфавиту - sorted) 
print('В соревновании участвовали: ', sorted(members))

# Мы записали людей с конца?
members.reverse()  # переворот списка, последний элемент становится первым

# Нам нужно взять первые 3 места
result = members[:3]

result = 'Победители: {}. Поздравляем!'.format(result)
print(result)

# ПРИМЕРЫ:


# Удалить элементы второго списка, присутствующие в первом списке
# Решение реализуется через перебор циклом for КОПИИ списка, т.к. это решает проблему удаления элементов списка при переборе 
list_1 = [2, 5, 8, 2, 12, 12, 4]
list_2 = [2, 7, 12, 3]
for number in list_1[:]:  # делая срез мы создаем КОПИЮ списка, чтобы избежать пропуска элементов при удалении
    if number in list_2:
        list_1.remove(number)
print(list_1)

# Задача. Получить новый список, элементами которого будут только уникальные элементы исходного
list_1 = [2, 2, 5, 12, 8, 2, 12]
result = []
for number in list_1:
    if list_1.count(number) == 1:  # проверяем количество вхождений в исходный список
        result.append(number)  # добавляем элемент в новый список
print(result)
